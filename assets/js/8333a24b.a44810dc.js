"use strict";(self.webpackChunktrahsu_dev=self.webpackChunktrahsu_dev||[]).push([[21],{855:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var t=i(4848),s=i(8453);const l={},r="[DB]E-R Model",a={id:"database/er-model",title:"[DB]E-R Model",description:"Main concepts",source:"@site/docs/database/er-model.md",sourceDirName:"database",slug:"/database/er-model",permalink:"/docs/database/er-model",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/database/er-model.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8cc7\u6599\u5eab\u7cfb\u7d71",permalink:"/docs/category/\u8cc7\u6599\u5eab\u7cfb\u7d71"},next:{title:"English",permalink:"/docs/category/english"}},d={},o=[{value:"Main concepts",id:"main-concepts",level:2},{value:"Entities \u548c Attributes",id:"entities-\u548c-attributes",level:2},{value:"Type of Attributes",id:"type-of-attributes",level:3},{value:"Entity Type \u548c Key Attribute",id:"entity-type-\u548c-key-attribute",level:3},{value:"Entity Set",id:"entity-set",level:3},{value:"Weak Entity Types",id:"weak-entity-types",level:3},{value:"Relationship",id:"relationship",level:2},{value:"Relationship Type \u548c Relationship Set",id:"relationship-type-\u548c-relationship-set",level:3},{value:"Recursive Relationship Type",id:"recursive-relationship-type",level:3}];function h(e){const n={h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"dbe-r-model",children:"[DB]E-R Model"}),"\n",(0,t.jsx)(n.h2,{id:"main-concepts",children:"Main concepts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Entities","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"entity types"}),"\n",(0,t.jsx)(n.li,{children:"entity sets"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Attributes","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"simple"}),"\n",(0,t.jsx)(n.li,{children:"composite"}),"\n",(0,t.jsx)(n.li,{children:"mutivalued"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Relations","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"relationship types"}),"\n",(0,t.jsx)(n.li,{children:"relationship sets"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"entities-\u548c-attributes",children:"Entities \u548c Attributes"}),"\n",(0,t.jsx)(n.h3,{id:"type-of-attributes",children:"Type of Attributes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Simple"}),"\n",(0,t.jsx)(n.li,{children:"Composite"}),"\n",(0,t.jsx)(n.li,{children:"Multi-valued"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"entity-type-\u548c-key-attribute",children:"Entity Type \u548c Key Attribute"}),"\n",(0,t.jsx)(n.p,{children:"Entity Type : Entities with the same basic attributes are grouped or typed into an entity type."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An entity type may have more than one key"}),"\n",(0,t.jsxs)(n.li,{children:["ER diagrams :","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An entity type is displayed in a rectangular box"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key Attribute : An attribute of an entity type for which each entity must have a unique value is called a key attribute of the entity type."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A key attribute may be composite."}),"\n",(0,t.jsxs)(n.li,{children:["Each key is ",(0,t.jsx)("ins",{children:"underlined"})]}),"\n",(0,t.jsxs)(n.li,{children:["ER diagrams :","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Attributes are displayed in ovals"}),"\n",(0,t.jsx)(n.li,{children:"Multivalued attributes displayed in double ovals"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"entity-set",children:"Entity Set"}),"\n",(0,t.jsxs)(n.p,{children:["Definition : Entity set is the ",(0,t.jsx)(n.strong,{children:"current state"})," of the entities of that type that are stored in the database"]}),"\n",(0,t.jsx)(n.h3,{id:"weak-entity-types",children:"Weak Entity Types"}),"\n",(0,t.jsx)(n.p,{children:"Definition :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An entity that does not have a key attribute"}),"\n",(0,t.jsx)(n.li,{children:"A weak entity must participate in an identifying relationship type with an owner or identifying entity type"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"relationship",children:"Relationship"}),"\n",(0,t.jsx)(n.h3,{id:"relationship-type-\u548c-relationship-set",children:"Relationship Type \u548c Relationship Set"}),"\n",(0,t.jsx)(n.p,{children:"Relationship Type : Is the schema description of a relationship"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A relationship type can have attributes"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Relationship Set : The ",(0,t.jsx)(n.strong,{children:"current state"})," of a relationship type"]}),"\n",(0,t.jsx)(n.p,{children:"ER diagrams :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Diamond-shaped box is used to display a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Connected to the participating entity types via straight lines"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Constrains :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Cardinality Ratio","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"One-to-one (1:1)"}),"\n",(0,t.jsxs)(n.li,{children:["One-to-many (1",":N",") or Many-to-one (N:1)"]}),"\n",(0,t.jsxs)(n.li,{children:["Many-tomany (M",":N",")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Existence Dependency Constraint","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"zero"}),"\n",(0,t.jsx)(n.li,{children:"one or more"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"ER diagrams :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cardinality ratio : Shown by placing appropriate numbers on the relationship edges."}),"\n",(0,t.jsx)(n.li,{children:"Participation constraint : Total shown by double line, partial by single line."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"recursive-relationship-type",children:"Recursive Relationship Type"}),"\n",(0,t.jsxs)(n.p,{children:["Definition : An relationship type whose with the same participating entity type in ",(0,t.jsx)(n.strong,{children:"distinct roles"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["ER diagrams :","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Need to display role names to distinguish participations."}),"\n"]}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);